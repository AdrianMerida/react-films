{"version":3,"sources":["components/films/FilmGenre.js","components/films/FilmItem.js","components/films/FilmList.js","components/misc/Header.js","App.js","serviceWorker.js","index.js"],"names":["FilmGenre","props","color","genre","getGenreColor","react_default","a","createElement","className","FilmItem","rating","ratings","reduce","acc","i","length","toFixed","undefined","genres","map","index","films_FilmGenre","key","id","style","maxWidth","onClick","onClickDelete","src","posterurl","alt","title","storyline","year","FilmList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickDeleteFilm","film","setState","films","state","filter","f","_this2","components_films_FilmItem","assign","bind","Component","Header","App","react","misc_Header","FilmList_FilmList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20661276.chunk.js","sourcesContent":["import React from 'react';\n\nconst getGenreColor = (genre) => {\n  switch (genre) {\n    case 'Action':\n    case 'Romance':\n    case 'Animation':\n      return 'danger';\n    case 'Fantasy':\n    case 'Adventure':\n      return 'success';\n    case 'Drama':\n      return 'secondary';\n    case 'Crime':\n    case 'Horror':\n      return 'warning';\n    default:\n      return 'info';\n  }\n}\n\nconst FilmGenre = (props) => {\n  let color = getGenreColor(props.genre);\n  return (\n    <span className={\"badge mr-1 badge-\" + color}>{props.genre}</span>\n  )\n}\n\nexport default FilmGenre;\n","import React from 'react';\nimport './FilmItem.css';\nimport FilmGenre from './FilmGenre';\n\nconst MIN_SPECIAL_FILM_RATING = 6;\n\nconst FilmItem = (props) => {\n\n  const rating = !props.ratings ? undefined : props.ratings.reduce((acc, rating, i, ratings) => {\n    acc += rating;\n    if (i === ratings.length - 1) {\n      acc /= ratings.length;\n    }\n    return acc;\n  }, 0).toFixed(1)\n\n  const genres = !props.genres ? [] : props.genres.map((genre, index) => <FilmGenre key={index} genre={genre} />)\n\n  return (\n    <div className={\"card \" + (rating > MIN_SPECIAL_FILM_RATING && \"bg-warning\")} id={props.id} style={{ maxWidth: \"18rem\"}}>\n      <i className=\"fa fa-times text-danger delete-film\" onClick={props.onClickDelete}></i>\n      <img className=\"card-img-top\" src={props.posterurl} alt={props.title} />\n      <div className=\"card-body\">\n        <div className=\"film-genres\">{genres}</div>\n        <h5 className=\"card-title\">{props.title}</h5>\n        <p className=\"card-text\">{props.storyline}</p>\n      </div>\n      <div className=\"card-footer d-flex justify-content-between\">\n        <small className=\"text-muted\">{props.year}</small>\n      { rating && <small className=\"text-muted\">{rating} <i className=\"fa fa-star text-warning\"></i></small> }\n      </div>\n    </div>\n  )\n}\n\nexport default FilmItem;","import React, { Component } from 'react';\nimport FilmItem from './FilmItem';\n\nexport default class FilmList extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      films: this.props.films || []\n    }\n  }\n\n  onClickDeleteFilm = (film) => {\n    this.setState({\n      films: this.state.films.filter(f => f !== film)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"card-columns\">\n        {this.state.films.map((film, index) => {\n          return <FilmItem key={index} {...film} onClickDelete={this.onClickDeleteFilm.bind(this, film)}/>\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nconst Header = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Iron Films</h1>\n        <p className=\"lead\">React component state tutorial</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component, Fragment } from 'react';\nimport films from './data/films.json';\nimport FilmList from './components/films/FilmList';\nimport Header from './components/misc/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <FilmList films={films} />\n            </div>\n          </div>\n        </div>\n      </Fragment>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}